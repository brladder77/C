#include <stdio.h>
#include <stdlib.h>
#define BOOL int
#define TRUE 1
#define FALSE 0
struct Node {
	int data;
	Node* left;
	Node* right;
};

Node* Root;

void InitTree(int data) {
	Root = (Node*)malloc(sizeof(Node));
	Root->data = data;
}
Node* AddChild(Node* Parent, int data, BOOL bleft) {
	Node* New;
	New = (Node*)malloc(sizeof(Node));
	New->data = data;
	New->left = NULL;
	New->right = NULL;

	if (bleft) {
		Parent->left = New;
	}
	else {
		Parent->right = New;
	}
	return New;
}
void InOrder(Node* R) {
	if (R->left) InOrder(R->left);
	printf("%d  ", R->data);
	if (R->right) InOrder(R->right);
}
void FreeTree(Node* R) {
	if (R->left)FreeTree(R->left);
	if (R->right)FreeTree(R->right);
	free(R);
}
void main() {
	Node* Left, * Right;
	InitTree(10);
	Left = AddChild(Root, 20, TRUE);
	Right = AddChild(Root, 30, FALSE);
	AddChild(Left, 40, TRUE);
	AddChild(Left, 50, FALSE);
	AddChild(Right, 60, TRUE);
	puts("*** InOrder ***"); puts("");
	InOrder(Root); puts("");
	FreeTree(Root);
}
