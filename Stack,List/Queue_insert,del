
#include <stdio.h>
#include <stdlib.h>
#define Q_SIZE 10

//char형을 큐 element의 자료형으로 정의
typedef char element;

typedef struct {
	//1차원 배열 큐 선언
	element queue[Q_SIZE];		//10개짜리 char 형 배열
	int front, rear;
} QUEUE;

// 공백 큐를 생성하는 연산
QUEUE* createQueue() {
	QUEUE* Q;		//QUEUE 구조를 가리킬 수 있는 포인터변수
	Q = (QUEUE*)malloc(sizeof(QUEUE));
	//front 초기값 설정
	Q->front = -1;
	//rear 초기값 설정
	Q->rear = -1;
	return Q;
}
//큐가 공백인지 확인하는 연산
int isEmpty(QUEUE* Q) {
	if (Q->front == Q->rear) {
		printf("\n Queue is empty! \n");
		return 1;
	}
	else return 0;
}
//큐가 포화 상태인지 확인하는 연산
int isFull(QUEUE* Q) {
	if (Q->rear == Q_SIZE - 1) {
		printf("\n Queue is full! \n");
		return 1;
	}
	else return 0;
}
//큐의 rear에 원소를 삽입하는 연산
void enQueue(QUEUE* Q, element item) {
	if (isFull(Q)) exit(1);
	else {
		Q->rear++;
		Q->queue[Q->rear] = item;
	}
}
//큐의 front에서 원소를 삭제하고 반환하는 연산
element deQueue(QUEUE* Q) {
	if (isEmpty(Q)) exit(1);
	else {
		Q->front++;
		return Q->queue[Q->front];
	}
}
//큐의 front에서 원소를 삭제하는 연산
void del(QUEUE* Q) {
	if (isEmpty(Q)) exit(1);
	else Q->front++;
}
//큐의 가장 앞에 있는 원소를 검색하여 반환하는 연산
element peek(QUEUE* Q) {
	if (isEmpty(Q)) exit(1);
	else return Q->queue[Q->front + 1];
}
//큐의 내용을 출력하는 연산
void printQ(QUEUE* Q) {
	int i;
	printf(" Queue : [");
	for (i = Q->front + 1; i <= Q->rear; i++)
		printf("%3c", Q->queue[i]);
	printf("  ] \n");
}
void main(void) {
	QUEUE* Q1 = createQueue();
	element data;
	printf("삽입 A->");		enQueue(Q1, 'A');	printQ(Q1);
	printf("삽입 B->");		enQueue(Q1, 'B');	printQ(Q1);
	printf("삭제  ->");		deQueue(Q1);	printQ(Q1);
	printf("삽입 C->");		enQueue(Q1, 'C');	printQ(Q1);
	data = peek(Q1);	printf(" peek item : %c \n", data);
	printf("삭제  ->");		deQueue(Q1);	printQ(Q1);
	printf("삭제  ->");		deQueue(Q1);	printQ(Q1);
}
